    
    
    
    
    首先介绍通过列表转化成数组。
      1) my_list = [2, 14, 6, 8]
         my_array = np.asarray(my_list)
         type(my_array)  ------  numpy.ndarray
    
    数组与标量的四则运算。
      2) my_array + 2  ------  array([4, 16, 8, 10])
         my_array / 2  ------  array([1, 7, 3, 4])
         
    通过函数创建全零数组（零矩阵）。
      3) second_array = np.zeros(4) + 3
         second_array  ------  array([3., 3., 3., 3.])
         
      4) my_array - second_array  ------  array([-2., 10., 2., 4.]) 
      
    通过函数创建全要素为1的矩阵。
      5) second_array = np.ones(4) + 3
         second_array  ------  array([4., 4., 4., 4.])
         
    通过函数创建单位矩阵.
      6) second_array = np.identity(4)
         second_array  ------  array([1., 0., 0., 0.],
                                     [0., 1., 0., 0.],
                                     [0., 0., 1., 0.],
                                     [0., 0., 0., 1.])
                                     
      7) my_array - second_array  ------  array([1., 14., 6., 8.],
                                                [2., 13., 6., 8.],
                                                [2., 14., 5., 8.],
                                                [2., 14., 6., 7.])
         #my_array的要素分别对second_array的四行要素进行减法，得到一个(4,4)的矩阵。加乘除同理。
    
    Numpy中最便利的方法之一，arange函数。函数中分别赋予开始、结束、间隔值的数值，会自动生成一个所需数组。第四引数可以定义数据类型。另外间隔值
  默认为1.
      8) x = np.arange(3, 7, 0.5)
         x  ------  array([3. , 3.5, 4. , 4.5, 5. , 5.5, 6. , 6.5])
         
    在无法确定间隔值得时候，也可以使用linspace函数直接定义需要的元素数量。函数会自动以等差数列的形式生成数组。
      9) x = np.linspace(1.2, 40.5, num=20)
         x  ------  array([ 1.2       ,  3.26842105,  5.33684211,  7.40526316,  9.47368421,
                            11.54210526, 13.61052632, 15.67894737, 17.74736842, 19.81578947,
                            21.88421053, 23.95263158, 26.02105263, 28.08947368, 30.15789474,
                            32.22631579, 34.29473684, 36.36315789, 38.43157895, 40.5       ])
                            
    接下来介绍两个使用方法类似，但是并不相同的函数。首先是返回等比数列的函数geomspace。
     10) np.geomspace(1, 625, num=5)  ------  array([1., 5., 25., 125., 625.])
     
    第二个方法是另一个返回等比数列的函数logspace，但是这个函数用法比较特殊，先来看个例子。
     11) np.logspace(3, 4, num=5)  ------  array([ 1000.        ,  1778.27941004,  3162.27766017,  5623.4132519 ,
                                                   10000.        ])
    为什么会出现这种形似乱码的情况呢，是因为logspace函数的开始值和结束值实际上是10的幂（10**Augument），所以如果想要严格定义开始和结束值，
  则需要以对数形式指定。
     12) np.logspace(np.log10(3), np.log10(4), num=5)  ------  array([3.        , 3.2237098 , 3.46410162, 3.72241944, 4.        ])
     
     
         
         
         
