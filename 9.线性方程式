



    Numpy中可以通过linalg.solve()函数来解线性方程。Ax = B这种形式的方程式可以通过对A的逆矩阵与B相乘来求得。
  但是如果A的次元过高，对逆矩阵的计算就会很困难。
    对于简单的线性方程的计算，不使用linalg.solve()函数，Numpy本身也可以求得。
      1) A = np.array([[2, 1, 2], [3, 2, 1], [0, 1, 1]])
         A  ------  araay([[2, 1, 2],
                           [3, 2, 1],
                           [0, 1, 1]])
                           
         B = np.array([8, 3, 4])
         B  ------  array([8, 3, 4])
         
         A_inv = np.linalg.inv(A) # 通过inv函数求出A的逆矩阵
         A_inv  ------  array([[ 0.2,  0.2, -0.6],
                               [-0.6,  0.4,  0.8],
                               [ 0.6, -0.4,  0.2]])
                               
         np.dot(A_inv, B)  ------  array([-0.2, -0.4, 4.4])
         
    下面通过linalg.solve()函数验证。
      2) x = np.linalg.solve(A, B)
         x  ------  array([-0.2, -0.4, 4.4])
         
    最后比较两个数组各元素。
      3) np.allclose(np.dot(A, x), B)  ------  True
      
    解线性方程中另外一个十分重要的函数，就是返回最小二乘解的linalg.lstsq()函数。这个函数会直接返回回归
  直线的参数。回归直线是指各数据点到某一直线的距离和最小的那条直线。距离的二乘和，实际上是表示了回归直
  线的所有误差。距离越大，误差也越大。换而言之，是误差最小的时候的参数。matplotlib是一个人气很高的python
  二次元结构库，可以使线性回归模型可视化。
      4) from numpy import arange, array, ones, linalg
         from pylab import plot, show
         x = np.arange(1, 11)
         A = np.vstack([x, np.ones(len(x))]).T
         A  ------  array([[ 1.,  1.],
                           [ 2.,  1.],
                           [ 3.,  1.],
                           [ 4.,  1.],
                           [ 5.,  1.],
                           [ 6.,  1.],
                           [ 7.,  1.],
                           [ 8.,  1.],
                           [ 9.,  1.],
                           [10.,  1.]])
                           
         y = [5, 6, 6.5, 7, 8, 9.5, 10, 10.4, 13.1, 15.5]
         w = linalg.lstsq(A, y)[0]
         w  ------  array([1.05575758, 3.29333333])
         
         line = w[0] * x + w[1]
         plot(x, line, 'r-', x, y, 'o')
         show()
    
             ![](./Numpy/Images/mat1.png)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
